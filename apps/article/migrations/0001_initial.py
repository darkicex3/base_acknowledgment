# -*- coding: utf-8 -*-
# Generated by Django 1.9.6 on 2016-05-16 08:21
from __future__ import unicode_literals

import colorfield.fields
import datetime
from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django.db.models.manager
import mptt.fields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('poll', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Article',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(default='', max_length=255)),
                ('content', models.TextField(default='')),
                ('publish_date', models.DateTimeField(help_text='The date and time this article shall appear online.')),
                ('modified', models.DateTimeField(editable=False)),
                ('status', models.CharField(choices=[('d', 'Draft'), ('p', 'Published'), ('w', 'Withdrawn')], default=('d', 'Draft'), max_length=1)),
                ('useful_counter', models.IntegerField(default=0, editable=False)),
                ('favorite_counter', models.IntegerField(default=0, editable=False)),
                ('view_counter', models.IntegerField(default=0, editable=False)),
                ('description', models.TextField(default='', help_text="If omitted, the description will be determined by the first bit of the article's content.")),
                ('expiration_date', models.DateTimeField(blank=True, help_text='Leave blank if the article does not expire.', null=True)),
                ('author', models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': 'Articles',
            },
        ),
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=50, null=True)),
                ('color', colorfield.fields.ColorField(default='#FF0000', help_text='Please choose a color from <a href="https://flatuicolors.com/" target="_blank">FLAT UI Color</a>', max_length=10)),
                ('lft', models.PositiveIntegerField(db_index=True, editable=False)),
                ('rght', models.PositiveIntegerField(db_index=True, editable=False)),
                ('tree_id', models.PositiveIntegerField(db_index=True, editable=False)),
                ('level', models.PositiveIntegerField(db_index=True, editable=False)),
                ('parent', mptt.fields.TreeForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='children', to='article.Category')),
            ],
            options={
                'verbose_name_plural': 'Categories',
                'verbose_name': 'Category',
            },
            managers=[
                ('_default_manager', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name='Comment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('comment', models.CharField(blank=True, max_length=50, null=True)),
                ('lft', models.PositiveIntegerField(db_index=True, editable=False)),
                ('rght', models.PositiveIntegerField(db_index=True, editable=False)),
                ('tree_id', models.PositiveIntegerField(db_index=True, editable=False)),
                ('level', models.PositiveIntegerField(db_index=True, editable=False)),
                ('author', models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('parent', mptt.fields.TreeForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='children', to='article.Comment')),
            ],
            options={
                'verbose_name_plural': 'Comments',
                'verbose_name': 'Comment',
            },
            managers=[
                ('_default_manager', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name='DailyRecap',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(default='', max_length=255)),
                ('content', models.TextField(default='')),
                ('modified', models.DateTimeField(editable=False)),
                ('publish_date', models.DateTimeField(help_text='The date and time this article shall appear online.')),
                ('view_counter', models.IntegerField(default=0, editable=False)),
                ('useful_counter', models.IntegerField(default=0, editable=False)),
                ('status', models.CharField(choices=[('d', 'Draft'), ('p', 'Published'), ('w', 'Withdrawn')], default=('d', 'Draft'), max_length=1)),
                ('author', models.ForeignKey(default=1, editable=False, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': 'Daily Recaps',
                'verbose_name': 'Daily Recap',
            },
        ),
        migrations.CreateModel(
            name='Feedback',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateTimeField()),
                ('rate', models.CharField(choices=[('0', 'Very Dissatisfied'), ('1', 'Dissatisfied'), ('2', 'Neutral'), ('3', 'Satisfied'), ('4', 'Very Satisfied')], default=('2', 'Neutral'), max_length=1)),
                ('explanation', models.TextField(default='')),
                ('author', models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('comments', models.ManyToManyField(blank=True, help_text='Tags that describe this article.', to='article.Comment')),
            ],
            options={
                'verbose_name_plural': 'FeedBacks',
                'verbose_name': 'FeedBack',
            },
        ),
        migrations.CreateModel(
            name='FeedbackManager',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('alert_useless_actived', models.BooleanField(default=False)),
                ('max_useless', models.IntegerField(null=True)),
                ('alert_view_actived', models.BooleanField(default=False)),
                ('min_view', models.IntegerField(null=True)),
            ],
            options={
                'verbose_name_plural': 'FeedBack Manager',
                'verbose_name': 'FeedBack Manager',
            },
        ),
        migrations.CreateModel(
            name='Shortcut',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=300, unique=True)),
                ('icon', models.CharField(default='Your Icon', help_text='Add an icon to your shortcut ! <a href="https://design.google.com/icons/">Click Here !</a>', max_length=500)),
                ('activated', models.BooleanField(default=True)),
                ('click_counter', models.IntegerField(default=0)),
                ('lft', models.PositiveIntegerField(db_index=True, editable=False)),
                ('rght', models.PositiveIntegerField(db_index=True, editable=False)),
                ('tree_id', models.PositiveIntegerField(db_index=True, editable=False)),
                ('level', models.PositiveIntegerField(db_index=True, editable=False)),
                ('articles', models.ManyToManyField(blank=True, help_text='Tags that describe this article.', to='article.Article')),
                ('parent', mptt.fields.TreeForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='children', to='article.Shortcut')),
            ],
            options={
                'verbose_name_plural': 'Shortcuts',
                'verbose_name': 'Shortcut',
            },
            managers=[
                ('_default_manager', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name='UserArticle',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('user_id', models.IntegerField(default=0)),
                ('article_id', models.IntegerField(default=0)),
                ('favorites', models.BooleanField(default=False)),
                ('visited', models.BooleanField(default=False)),
                ('searched', models.BooleanField(default=False)),
                ('readed', models.BooleanField(default=False)),
                ('useful', models.BooleanField(default=False)),
                ('date_visited', models.DateTimeField(default=datetime.datetime.now)),
                ('date_searched', models.DateTimeField(default=datetime.datetime.now)),
                ('date_added', models.DateTimeField(default=datetime.datetime.now)),
            ],
            options={
                'verbose_name_plural': "User's Articles",
                'verbose_name': 'User Article',
            },
        ),
        migrations.AddField(
            model_name='article',
            name='categories',
            field=models.ManyToManyField(blank=True, help_text='Tags that describe this article.', to='article.Category'),
        ),
        migrations.AddField(
            model_name='article',
            name='feedback',
            field=models.ManyToManyField(blank=True, help_text='Tags that describe this article.', to='article.Feedback'),
        ),
        migrations.AddField(
            model_name='article',
            name='feedback_manager',
            field=models.ForeignKey(default=1, editable=False, on_delete=django.db.models.deletion.CASCADE, to='article.FeedbackManager'),
        ),
        migrations.AddField(
            model_name='article',
            name='polls',
            field=models.ManyToManyField(blank=True, help_text='Tags that describe this article.', to='poll.Poll'),
        ),
    ]
